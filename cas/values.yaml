# Default values for cas.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 2

apache:
  image:
    repository: quay.io/centerforopenscience/shibboleth
    tag: latest
    pullPolicy: Always
  resources: {}
    #limits:
    #  cpu: 1
    #  memory: 128Mi
    #requests:
    #  cpu: 100m
    #  memory: 128Mi

jetty:
  image:
    repository: quay.io/centerforopenscience/cas
    tag: develop
    pullPolicy: Always
  resources: {}
    #limits:
    #  cpu: 1
    #  memory: 128Mi
    #requests:
    #  cpu: 100m
    #  memory: 128Mi

horizontalPodAutoscaler:
  enabled: false
  maxReplicas: 3
  targetCPUUtilizationPercentage: 90

service:
  name: cas
  type: ClusterIP
  sessionAffinity: None
  externalPort: 8080
  internalPort: 80

ingress:
  enabled: false
  # Used to create Ingress record (should used with service.type: ClusterIP).
  hosts:
    - chart-example.local
  paths:
    - /
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
casDomain: 'staging-accounts.osf.io'
osfDomain: 'staging.osf.io'
apiDomain: 'staging-api.osf.io'
preprintProviderDomains:
  override: true
  prefix: staging-
  suffix: .cos.io

### https://sentry.cos.io/sentry/{project}/settings/keys/
sentryDSN: ''

# environment variables
configEnvs: {}

# override files here
configFiles: {}

# secret environment variables 
secretEnvs:
  OAUTH_ORCID_CLIENT_ID: ''
  OAUTH_ORCID_CLIENT_SECRET: ''
  OSF_DB_URL: 'jdbc:postgresql://osf-postgresql.namespace/osf?targetServerType=master'
  OSF_DB_USER: ''
  OSF_DB_PASSWORD: ''
  OSF_JWE_SECRET: ''
  OSF_JWT_SECRET: ''
  TGC_ENCRYPTION_KEY: ''
  TGC_SIGNING_KEY: ''
  ## If postgresql.enabled is false
  # DATABASE_HOST: ''
  # DATABASE_NAME: ''
  # DATABASE_USER: ''
  # DATABASE_PASSWORD: ''

# secret files
secretFiles:
  shibboleth/incommon-idp-signature.pem: |-
    
  shibboleth/sp-cert.pem: |-
    
  shibboleth/sp-key.pem: |-
    

# Database connection TLS
tls:
  enabled: false
  files:
    # Root Certificate
    root.crt: |-

    # CAS database key
    postgresql.pk8: |-
      
    # CAS database certificate
    postgresql.crt: |-
      
    # OSF database key
    osf.pk8: |-
      
    # OSF database certificate
    osf.crt: |-
    

postgresql:
  enabled: false
  ## postgres image repository
  image: "postgres"
  ## postgres image version
  ## ref: https://hub.docker.com/r/library/postgres/tags/
  ##
  imageTag: "9.6"

  ## Specify a imagePullPolicy
  ## 'Always' if imageTag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  # imagePullPolicy:

  ## Create a database user
  ## Default: postgres
  postgresUser: postgres
  # Default: random 10 character string
  # postgresPassword:

  ## Create a database
  ## Default: the postgres user
  postgresDatabase: cas

  # Specify initdb arguments, e.g. --data-checksums
  # ref: https://github.com/docker-library/docs/blob/master/postgres/content.md#postgres_initdb_args
  # ref: https://www.postgresql.org/docs/current/static/app-initdb.html
  postgresInitdbArgs: --data-checksums

  ## Persist data to a persitent volume
  persistence:
    enabled: true

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
    ## Default: volume.alpha.kubernetes.io/storage-class: default
    ##
    # storageClass:
    accessMode: ReadWriteOnce
    size: 25Gi
    subPath: "postgresql-db"

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
